# Contents of ~/my_app/streamlit_app.py
import streamlit as st
import pandas as pd
import io
import joblib
import os
import warnings
warnings.filterwarnings("ignore")

def main_page():
    #st.markdown("# Main page üéà")
    st.sidebar.markdown("# ACCUEIL üéà")
    st.header ("Auteur : Ciss√© NIANG")
    st.title("Application de Machine Learning sur les d√©penses m√©dicales en fonction de l'√¢ge, l'IMC, le sexe.... ")
    choix = st.sidebar.radio("S√©lection", ["Description", "Documentation"])
    if choix == "Description":
        st.subheader("Voici la description des donn√©es")
        st.write("L'ensemble de donn√©es insurance.csv contient 1338 observations (lignes) et 7 caract√©ristiques (colonnes). L'ensemble de donn√©es contient 4 caract√©ristiques num√©riques (√¢ge, bmi, enfants et d√©penses) et 3 caract√©ristiques nominales (sexe, fumeur et r√©gion) qui ont √©t√© converties en facteurs avec une valeur num√©rique d√©sign√©e pour chaque niveau.")
        st.write("L'objectif de cet exercice est d'examiner diff√©rentes caract√©ristiques pour observer leur relation et de tracer une r√©gression lin√©aire multiple bas√©e sur plusieurs caract√©ristiques de l'individu telles que l'√¢ge, l'√©tat physique/familial et l'emplacement par rapport √† leurs frais m√©dicaux existants √† utiliser pour pr√©dire les frais m√©dicaux futurs des personnes qui aident l'assurance m√©dicale √† prendre une d√©cision sur la perception de la prime")
    if choix == "Documentation":
        st.subheader("Voici la documentation de l'application Web")
        st.write("1) https://blog.streamlit.io/introducing-multipage-apps/")
        st.write("2) https://chat.openai.com/")
        st.write("3) https://www.kaggle.com/datasets/noordeen/insurance-premium-prediction")

chemin = "/Users/cisseniang/Documents/Data/Donn√©es ML/" 
path = os.path.dirname(os.path.abspath(__file__)) if '__file__' in locals() else '.'

# Concat√©nez le chemin pour obtenir le chemin absolu du fichier 'photo.png'
chemin = os.path.join(path, 'Insurance.csv')

def page2():
    st.markdown("# Analyse Exploratoire des donn√©es‚ùÑÔ∏è")
    st.sidebar.markdown("# EDA ‚ùÑÔ∏è")
    choix = st.sidebar.radio("S√©lection", ["Data et Infos", "Analyse descriptive"])
 

    if choix == "Data et Infos":
        st.subheader("Afficher les donn√©es")
    #def load_data(): 
        #chemin = "/Users/cisseniang/Documents/Data/Donn√©es ML/Insurance.csv"
    
        # Obtenez le chemin du r√©pertoire courant
     
        with open(chemin, 'rb') as fichier:
            # Charger le mod√®le
            data = pd.read_csv(fichier)

    #Affichage de la table de donn√©es
        #df = load_data()
 
        df_sample = data.sample(100)
        #st.write(df)
        st.dataframe(df_sample)
        st.button("Rerun")

        
        st.subheader("Infos sur la data")

        buffer = io.StringIO()
        data.info(buf=buffer)
        s = buffer.getvalue()
        st.text(s)
        
    if choix == "Analyse descriptive":
        st.subheader("Statistiques descriptives")
        

        with open(chemin, 'rb') as fichier:
            # Charger le mod√®le
            data = pd.read_csv(fichier)
        st.dataframe(data.describe())


    
def page3():
    st.markdown("# Mod√©lisation üéâ")
    st.sidebar.markdown("# Mod√©lisationüéâ")

    choix = st.sidebar.radio("choix du mod√®le", ["Mod√®le de R√©gression", "Mod√®le Ridge"])

    if choix == "Mod√®le Ridge":

 
        # Charger le mod√®le pr√©-entra√Æn√©
        #modele_chemin1 = "/Users/cisseniang/Documents/Data/Donn√©es ML/model.pkl"
        #model_ridge = os.path.join(path, 'model.pkl')
        model_ridge = joblib.load(open(path+'/model.pkl', 'rb'))


        # Interface utilisateur Streamlit
        st.title("Pr√©diction de D√©penses M√©dicales")

        st.write(
            "Cette application permet de pr√©dire les d√©penses m√©dicales en fonction de l'√¢ge, du sexe, "
            "de l'IMC, du nombre d'enfants, du statut de fumeur et de la r√©gion."
        )

        # Entr√©es utilisateur
        age = st.slider("√Çge", min_value=0, max_value=100, value=30, step=1)
        sex = st.selectbox("Sexe", ['male', 'female'])
        bmi = st.number_input("IMC", min_value=10.0, max_value=50.0, value=25.0, step=0.1)
        children = st.slider("Nombre d'enfants", min_value=0, max_value=5, value=0, step=1)
        smoker = st.radio("Fumeur", ['yes', 'no'])
        region = st.selectbox("R√©gion", ['southeast', 'southwest', 'northwest', 'northeast'])

        # Pr√©dictions
        input_features = [[age, bmi, children, 1 if sex == 'male' else 0, 1 if smoker == 'yes' else 0,
                        1 if region == 'southeast' else 0]]
        prediction = model_ridge.predict(input_features)

        # Afficher le r√©sultat
        st.write(f"La pr√©diction des d√©penses m√©dicales est : {prediction[0]:.2f} $")

    if choix == "Mod√®le de R√©gression":

 
        model_reg = joblib.load(open(path+'/model_reg.pkl', 'rb'))

        # Interface utilisateur Streamlit
        st.title("Pr√©diction de D√©penses M√©dicales")

        st.write(
            "Cette application permet de pr√©dire les d√©penses m√©dicales en fonction de l'√¢ge, du sexe, "
            "de l'IMC, du nombre d'enfants, du statut de fumeur et de la r√©gion."
        )

        # Entr√©es utilisateur
        age = st.slider("√Çge", min_value=0, max_value=100, value=30, step=1)
        sex = st.selectbox("Sexe", ['male', 'female'])
        bmi = st.number_input("IMC", min_value=10.0, max_value=50.0, value=25.0, step=0.1)
        children = st.slider("Nombre d'enfants", min_value=0, max_value=5, value=0, step=1)
        smoker = st.radio("Fumeur", ['yes', 'no'])
        region = st.selectbox("R√©gion", ['southeast', 'southwest', 'northwest', 'northeast'])

        # Pr√©dictions
        input_features = [[age, bmi, children, 1 if sex == 'male' else 0, 1 if smoker == 'yes' else 0,
                        1 if region == 'southeast' else 0]]
        prediction = model_reg.predict(input_features)

        # Afficher le r√©sultat
        st.write(f"La pr√©diction des d√©penses m√©dicales est : {prediction[0]:.2f} $")



page_names_to_funcs = {
    "Accueil": main_page,
    "EDA": page2,
    "Mod√©lisation": page3,
}

selected_page = st.sidebar.selectbox("S√©lectionner une page", page_names_to_funcs.keys())
page_names_to_funcs[selected_page]()